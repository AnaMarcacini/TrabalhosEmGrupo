// Especificação do parser CUP
package parser;
import java_cup.runtime.*;
import java.util.HashMap;

parser code{:
        private HashMap<String, Double> symbolTable = new HashMap<>();
:}
// ^ possibilidade de momorizar o valor das minhas variaveis ^^^- por exemplo x=10 e depois y = 2*x
// Definição dos terminais
terminal            SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal            UMINUS, LPAREN, RPAREN, ASSIGN,POTENCIA;
terminal Double    NUMBER;
terminal String    ID;

// Definição dos não-terminais
non terminal            expr_list, expr_part;
non terminal Double    expr;
// Precedência e associatividade dos operadores
// PRIORIDADE MAIS BAIXA ESTÁ A CIMA (PRIMEIRO RESOLVE A OPERAÇÃO E DEPOIS SALVA O ID)
precedence right ASSIGN,SIM;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS, POTENCIA;
// Regras da gramática
//ASSIGN = ; colocar no analisador lexico
//                RESULT e; -- devolve a resposta

expr_list ::= expr_list expr_part
    | expr_part
    ;
expr_part ::= expr:e {:
                if(e!= null){
                        System.out.println("Resultado: " + e);
                }
        :} SEMI
    | error SEMI
    ;
expr ::= expr:e1 PLUS expr:e2
            {: RESULT = e1 + e2; :}
    | expr:e1 MINUS expr:e2
            {: RESULT = e1 - e2; :}
    | expr:e1 TIMES expr:e2
            {: RESULT = e1 * e2; :}
    | expr:e1 DIVIDE expr:e2
            {: RESULT = e1 / e2; :}
    | expr:e1 MOD expr:e2
            {: RESULT = e1 % e2; :}
    | expr:e1 POTENCIA expr:e2
            {: RESULT = Math.pow(e1, e2); :}
    | SIM expr:e2
            {: RESULT = Math.sin(e2); :}
    | NUMBER:n {: RESULT = n; :}
    | MINUS expr:e {: RESULT = -e;
                    :} %prec UMINUS
    | LPAREN expr:e RPAREN {: RESULT = e; :}
    | ID:id ASSIGN expr:e{:
                symbolTable.put(id, e);
                //RESULT = e;
        :}
    | ID:id{:
                Double v = symbolTable.get(id);
                if(v == null){
                        System.out.println("Variavel n" +id + "não foi inicializada");
                }
                RESULT = v;
        :}
    ;
